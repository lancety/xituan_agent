AWSTemplateFormatVersion: '2010-09-09'
Description: 'Xituan Application Load Balancer (ALB) for Backend'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name

  VPCId:
    Type: String
    Description: VPC ID

  PublicSubnetId:
    Type: String
    Description: Public Subnet ID (AZ A)

  PublicSubnet2Id:
    Type: String
    Description: Public Subnet ID (AZ B)

  # Optional HTTPS support
  ACMCertificateArn:
    Type: String
    Default: ''
    Description: Optional ACM certificate ARN for HTTPS (leave empty to create only HTTP listener)

Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'ALB security group - ${Environment}'
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from internet
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS from internet
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub 'xituan-alb-sg-${Environment}'

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'xituan-alb-${Environment}'
      Scheme: internet-facing
      Type: application
      IpAddressType: ipv4
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnetId
        - !Ref PublicSubnet2Id
      Tags:
        - Key: Name
          Value: !Sub 'xituan-alb-${Environment}'

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub 'xituan-backend-tg-${Environment}'
      VpcId: !Ref VPCId
      Protocol: HTTP
      Port: 3050
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckProtocol: HTTP
      HealthCheckPort: 'traffic-port'
      HealthCheckPath: /health
      Matcher:
        HttpCode: '200'
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '30'
      Tags:
        - Key: Name
          Value: !Sub 'xituan-backend-tg-${Environment}'

  HTTPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: !If [UseHTTPS, redirect, forward]
          RedirectConfig: !If 
            - UseHTTPS
            - Protocol: HTTPS
              Port: '443'
              StatusCode: HTTP_301
            - !Ref AWS::NoValue
          TargetGroupArn: !If [UseHTTPS, !Ref AWS::NoValue, !Ref BackendTargetGroup]

  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: UseHTTPS
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref ACMCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

Conditions:
  UseHTTPS: !Not [ !Equals [ !Ref ACMCertificateArn, '' ] ]

Outputs:
  ALBArn:
    Description: ALB ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub '${AWS::StackName}-ALB-ARN'

  ALBDNSName:
    Description: ALB DNS name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-ALB-DNS'

  BackendTargetGroupArn:
    Description: Backend target group ARN
    Value: !Ref BackendTargetGroup
    Export:
      Name: !Sub '${AWS::StackName}-Backend-TG-ARN'

  ALBSecurityGroupId:
    Description: ALB security group ID
    Value: !Ref ALBSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ALB-SG-ID'
